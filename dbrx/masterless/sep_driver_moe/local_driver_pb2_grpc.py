# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import local_driver_pb2 as local__driver__pb2


class LocalDriverStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Start = channel.unary_unary(
                '/LocalDriver/Start',
                request_serializer=local__driver__pb2.Inputs.SerializeToString,
                response_deserializer=local__driver__pb2.Outputs.FromString,
                )
        self.Receive = channel.unary_unary(
                '/LocalDriver/Receive',
                request_serializer=local__driver__pb2.MoeShardOuts.SerializeToString,
                response_deserializer=local__driver__pb2.Empty.FromString,
                )


class LocalDriverServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Start(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Receive(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LocalDriverServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Start': grpc.unary_unary_rpc_method_handler(
                    servicer.Start,
                    request_deserializer=local__driver__pb2.Inputs.FromString,
                    response_serializer=local__driver__pb2.Outputs.SerializeToString,
            ),
            'Receive': grpc.unary_unary_rpc_method_handler(
                    servicer.Receive,
                    request_deserializer=local__driver__pb2.MoeShardOuts.FromString,
                    response_serializer=local__driver__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'LocalDriver', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LocalDriver(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Start(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/LocalDriver/Start',
            local__driver__pb2.Inputs.SerializeToString,
            local__driver__pb2.Outputs.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Receive(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/LocalDriver/Receive',
            local__driver__pb2.MoeShardOuts.SerializeToString,
            local__driver__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
